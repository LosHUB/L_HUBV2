local GetHwid = game:GetService("RbxAnalyticsService"):GetClientId()

local HttpService = game:GetService("HttpService")
local FileName = "AutoSaveKeyL-HUB_" .. game.Players.LocalPlayer.Name .. ".txt"

-- HWID spécifique
local AllowedHwid = "d9675a40-6d0f-4276-80b7-6209913edcc3"

-- Fonction pour charger le jeu
local function LoadGame()
    -- Protection contre les erreurs sur Fluent.Destroy()
    local success, err = pcall(function()
        Fluent.Destroy()
    end)

    if not success then
        warn("Erreur lors de l'appel à Fluent.Destroy() : " .. tostring(err))
    end

    local scriptURL = "https://raw.githubusercontent.com/LosHUB/L-HUB/refs/heads/main/PGame"
    loadstring(game:HttpGet(scriptURL))() -- Charger et exécuter le script externe
end

-- Vérification de l'HWID
if GetHwid == AllowedHwid then
    print("HWID vérifié : accès autorisé.")
    LoadGame()
    return -- Arrêter l'exécution du reste du script
else
    print("HWID non autorisé : accès au système de clé requis.")
end

-- Charger le reste du système de clé si le HWID ne correspond pas
print("Loading KeySystem...")
local KeyGuardLibrary = loadstring(game:HttpGet("https://cdn.keyguardian.org/library/v1.0.0.lua"))()
if not KeyGuardLibrary then
    error("Failed to load KeySystem!")
    return
end

-- KeyGuard configuration
local trueData = "e25ea5fdaaf140f79fa3b8c4ef5b1d13"
local falseData = "61eaea96b11c4a40a2185e1e38e588bb"

KeyGuardLibrary.Set({
    publicToken = "b21b716cc5054b499e925c99a61bc671",
    privateToken = "de168967445d4680994f08e06aa3ad67",
    trueData = trueData,
    falseData = falseData,
})

-- Fonction pour vérifier la validité de la clé
local function isKeyValid(key)
    local premiumResponse = KeyGuardLibrary.validatePremiumKey(key)
    if premiumResponse == trueData then
        return "premium"
    else
        return false
    end
end

-- Charger automatiquement une clé sauvegardée
if isfile(FileName) then
    local savedData = readfile(FileName)
    local savedKey = HttpService:JSONDecode(savedData).key or nil
    if savedKey then
        local keyType = isKeyValid(savedKey)
        if keyType then
            print("Automatically validated saved key: (" .. keyType:upper() .. ")")
            LoadGame()
            return -- Stop the script after loading the game
        else
            print("Invalid saved key. Deleting.")
            delfile(FileName)
        end
    end
end

-- Chargement de Fluent uniquement si aucune clé valide n'est trouvée
print("Loading Fluent...")
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
if not Fluent then
    error("Failed to load Fluent!")
    return
end

-- Création de l'interface utilisateur Fluent
local Window = Fluent:CreateWindow({
    Title = "Key System",
    SubTitle = "L-HUB",
    TabWidth = 100,
    Size = UDim2.fromOffset(440, 300),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    KeySys = Window:AddTab({ Title = "Key System", Icon = "key" }),
}

-- Champ de saisie pour entrer une clé
local EntKey = Tabs.KeySys:AddInput("Input", {
    Title = "Enter Key",
    Description = "Enter your key below",
    Default = key or "",
    Placeholder = "Enter your key here...",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        key = Value
    end
})

-- Bouton pour vérifier la clé
local CheckKey = Tabs.KeySys:AddButton({
    Title = "Validate Key",
    Description = "Click to validate the entered key",
    Callback = function()
        local keyType = isKeyValid(key)
        if keyType then
            print("Valid key detected: (" .. keyType:upper() .. ")")
            writefile(FileName, HttpService:JSONEncode({ key = key }))

            -- Notification de succès
            Fluent:Notify({
                Title = "Valid Key",
                Content = "Your key is valid as a " .. keyType:upper() .. " key",
                SubContent = "Access granted!",
                Duration = 5
            })
            wait(1)
            LoadGame()
        else
            print("Invalid key!")
            
            -- Notification d'échec
            Fluent:Notify({
                Title = "Invalid Key",
                Content = "The key you entered is invalid.",
                SubContent = "Please check and try again.",
                Duration = 5
            })
        end
    end
})

Window:SelectTab(1)
